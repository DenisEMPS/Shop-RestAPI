// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	types "school21_project1/types"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClient) Create(client types.CreateClient) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", client)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), client)
}

// Delete mocks base method.
func (m *MockClient) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockClient) Find(name, surname string) ([]types.ClientDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", name, surname)
	ret0, _ := ret[0].([]types.ClientDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockClientMockRecorder) Find(name, surname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockClient)(nil).Find), name, surname)
}

// GetAll mocks base method.
func (m *MockClient) GetAll(limit, offset int) ([]types.ClientDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", limit, offset)
	ret0, _ := ret[0].([]types.ClientDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockClientMockRecorder) GetAll(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockClient)(nil).GetAll), limit, offset)
}

// Update mocks base method.
func (m *MockClient) Update(id int, adress types.AdressDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, adress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientMockRecorder) Update(id, adress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClient)(nil).Update), id, adress)
}

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProduct) Create(product types.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductMockRecorder) Create(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProduct)(nil).Create), product)
}

// Delete mocks base method.
func (m *MockProduct) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProduct)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockProduct) GetAll(offset, limit int) ([]types.ProductDAO, []types.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", offset, limit)
	ret0, _ := ret[0].([]types.ProductDAO)
	ret1, _ := ret[1].([]types.Image)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductMockRecorder) GetAll(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProduct)(nil).GetAll), offset, limit)
}

// GetByID mocks base method.
func (m *MockProduct) GetByID(id int) (types.ProductDAO, types.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(types.ProductDAO)
	ret1, _ := ret[1].(types.Image)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProductMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProduct)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockProduct) Update(id int, productU types.ProductUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, productU)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProductMockRecorder) Update(id, productU interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProduct)(nil).Update), id, productU)
}

// MockSupplier is a mock of Supplier interface.
type MockSupplier struct {
	ctrl     *gomock.Controller
	recorder *MockSupplierMockRecorder
}

// MockSupplierMockRecorder is the mock recorder for MockSupplier.
type MockSupplierMockRecorder struct {
	mock *MockSupplier
}

// NewMockSupplier creates a new mock instance.
func NewMockSupplier(ctrl *gomock.Controller) *MockSupplier {
	mock := &MockSupplier{ctrl: ctrl}
	mock.recorder = &MockSupplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSupplier) EXPECT() *MockSupplierMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSupplier) Create(supplier types.CreateSupplier) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", supplier)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSupplierMockRecorder) Create(supplier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSupplier)(nil).Create), supplier)
}

// Delete mocks base method.
func (m *MockSupplier) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSupplierMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSupplier)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockSupplier) GetAll() ([]types.SupplierDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]types.SupplierDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSupplierMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSupplier)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockSupplier) GetByID(id int) (types.SupplierDAO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(types.SupplierDAO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSupplierMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSupplier)(nil).GetByID), id)
}

// Update mocks base method.
func (m *MockSupplier) Update(id int, adress types.AdressDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, adress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSupplierMockRecorder) Update(id, adress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSupplier)(nil).Update), id, adress)
}

// MockImage is a mock of Image interface.
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage.
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance.
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImage) Create(image types.CreateImageProduct) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", image)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockImageMockRecorder) Create(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImage)(nil).Create), image)
}

// Delete mocks base method.
func (m *MockImage) Delete(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageMockRecorder) Delete(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImage)(nil).Delete), uuid)
}

// GetByID mocks base method.
func (m *MockImage) GetByID(id string) (types.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(types.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockImageMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockImage)(nil).GetByID), id)
}

// GetByProductID mocks base method.
func (m *MockImage) GetByProductID(id int) (types.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductID", id)
	ret0, _ := ret[0].(types.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductID indicates an expected call of GetByProductID.
func (mr *MockImageMockRecorder) GetByProductID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductID", reflect.TypeOf((*MockImage)(nil).GetByProductID), id)
}

// Update mocks base method.
func (m *MockImage) Update(uuid string, image types.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", uuid, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockImageMockRecorder) Update(uuid, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockImage)(nil).Update), uuid, image)
}
